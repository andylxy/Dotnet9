@using Dotnet9.Categories
@using JetBrains.Annotations
@using Castle.Components.DictionaryAdapter
@inject ICategoryAppService _categoryAppService


<Card>
    <TreeView Nodes="_items"
              GetChildNodes="@(item => item.Children)"
              HasChildNodes="@(item => item.Children?.Any() == true)"
              @bind-SelectedNode="_selectedNode"
              @bind-ExpandedNodes="_expandedNodes">
        <NodeContent>@context.Text</NodeContent>
    </TreeView>
</Card>

@code {

    public class Item
    {
        public string Text { get; set; }
        public List<Item> Children { get; set; }
    }

    List<Item> _items = new List<Item>();

    IList<Item> _expandedNodes = new List<Item>();
    Item _selectedNode;

    protected override async Task OnInitializedAsync()
    {
        var categoryDtos = await _categoryAppService.GetListAsync();
        _items.Clear();
        ReadChildren(categoryDtos, null, _items);
    }

    private void ReadChildren(List<CategoryDto> sources, Guid? parentId, List<Item> parentChildren)
    {
        var children = sources.FindAll(x => x.ParentId == parentId);
        if (children is not {Count: > 0 }) return;
        foreach (var child in children)
        {
            var currentItem = new Item
            {
                Text = child.Name,
                Children = new EditableList<Item>()
            };
            parentChildren.Add(currentItem);
            ReadChildren(sources, child.Id, currentItem.Children);
        }
    }

    private void SelectedNodeChanged(Item item)
    {

    }
}