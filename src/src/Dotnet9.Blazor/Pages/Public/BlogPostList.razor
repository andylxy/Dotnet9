@page "/cat/{Category}"
@using Dotnet9.Blogs
@using Dotnet9.Categories
@using JetBrains.Annotations
@using Volo.Abp.Application.Dtos
@using System.Net
@using Castle.Components.DictionaryAdapter
@inject IBlogPostAppService _blogPostAppService

<Row>
    <Column ColumnSize="ColumnSize.Is3">
        <CategorySidebar/>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <div class="whitebg bloglist">
            @if (BlogPostListItems != null)
            {
                <ul>
                    @foreach (var blogPostDto in BlogPostListItems)
                    {
                        <li>
                            <h3 class="blogtitle">
                                <a href="/@blogPostDto.Slug" target="_blank">@blogPostDto.Title</a>
                            </h3>
                            <span class="blogpic imgscale">
                                <i>
                                    <a href="/">WPF</a>
                                </i>
                                <a href="/@blogPostDto.Slug" title="@blogPostDto.Title">
                                    <img src="@blogPostDto.CoverImageUrl" alt="@blogPostDto.Title"/>
                                </a>
                            </span>
                            <p class="blogtext">
                                @blogPostDto.ShortDescription
                            </p>
                            <p class="bloginfo">
                                <Icon Name="IconName.User"/>
                                <span>Admin</span>
                                <Icon Name="IconName.Clock"/>
                                <small style="opacity: .65;">@blogPostDto.CreationTime.ToLocalTime()</small>
                                <span>
                                    【
                                    <a href="/">最热</a>
                                    】
                                </span>
                            </p>
                            <a href="/@blogPostDto.Slug" class="viewmore">阅读更多</a>
                        </li>
                    }
                </ul>
            }
            @if (((TotalCount + PageSize - 1) / PageSize) > CurrentPage)
            {
                <Button Color="Color.Primary" Loading="@_isLoading" Clicked="ReadDataAsync">
                    Load more
                </Button>
            }
            else
            {
                <Button Color="Color.Secondary">
                    No more data!
                </Button>
            }
        </div>
    </Column>
    <Column ColumnSize="ColumnSize.Is3">
        <HomeRightSidebar/>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <Footer/>
    </Column>
</Row>

@code {
    private string Filter { get; set; }

    [CanBeNull]
    [Parameter]
    public string Category { get; set; }

    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;

    private int CurrentPage { get; set; }

    private int TotalCount { get; set; }

    private bool _isLoading;

    [CanBeNull]
    private List<BlogPostDto> BlogPostListItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CurrentPage = 0;
        BlogPostListItems?.Clear();

        await ReadDataAsync();
    }

    private async Task ReadDataAsync()
    {
        var key = Category == null ? "" : System.Web.HttpUtility.UrlDecode(Category).ToLower();
        _isLoading = true;
        var result = await _blogPostAppService.GetListAsync(new GetBlogPostListDto() { Category = key, Sorting = nameof(BlogPostDto.CreationTime), MaxResultCount = PageSize, SkipCount = CurrentPage * PageSize });
        _isLoading = false;
        CurrentPage++;

        BlogPostListItems ??= new EditableList<BlogPostDto>();
        if (result.Items is {Count: > 0 })
        {
            BlogPostListItems.AddRange(result.Items);
        }
        TotalCount = (int)result.TotalCount;
    }

}