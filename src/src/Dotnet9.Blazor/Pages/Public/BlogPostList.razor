@page "/cat/{Category}"
@page "/s/{Filter}"

@using Dotnet9.Blogs
@using Dotnet9.Categories
@using JetBrains.Annotations
@using Volo.Abp.Application.Dtos
@using System.Net
@using Castle.Components.DictionaryAdapter
@inject IBlogPostAppService _blogPostAppService

<Row>
    <Column ColumnSize="ColumnSize.Is2.OnDesktop">
        <CategorySidebar/>
    </Column>
    <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is12.OnMobile">
        <BlogSearch Filter="@Filter"/>
        <div class="whitebg bloglist">
            @if (BlogPostListItems != null)
            {
                <ul>
                    @foreach (var blogPostDto in BlogPostListItems)
                    {
                        <li>
                            <Card>
                                <CardHeader>
                                    <h3 class="blogtitle">
                                        <a href="/@blogPostDto.Slug">@blogPostDto.Title</a>
                                    </h3>
                                </CardHeader>
                                <CardBody>
                                    <span class="blogpic imgscale">
                                        <i>
                                            <a href="#">WPF</a>
                                        </i>
                                        <a href="/@blogPostDto.Slug" title="@blogPostDto.Title">
                                            <img src="@blogPostDto.CoverImageUrl" alt="@blogPostDto.Title"/>
                                        </a>
                                    </span>
                                    <p class="blogtext">
                                        <a href="/@blogPostDto.Slug">@blogPostDto.ShortDescription</a>
                                    </p>
                                    <p class="bloginfo">
                                        <Icon Name="IconName.User"/>
                                        <span>@(blogPostDto.Original.IsNullOrWhiteSpace() ? "沙漠尽头的狼" : blogPostDto.Original)</span>
                                        <Icon Name="IconName.Clock"/>
                                        <small style="opacity: .65;">@blogPostDto.CreationTime.ToLocalTime()</small>
                                        <span>
                                            【
                                            <a href="#">最热</a>
                                            】
                                        </span>
                                    </p>
                                    <a href="#" class="viewmore">阅读更多</a>
                                </CardBody>
                            </Card>
                        </li>
                    }
                </ul>
            }
            <div class="div-load-button">
                @if (((TotalCount + PageSize - 1) / PageSize) > CurrentPage)
                {
                    <Button Size="Size.Large" Color="Color.Primary" Loading="@_isLoading" Clicked="ReadDataAsync">
                        Load more
                    </Button>
                }
                else
                {
                    <Button Size="Size.Large" Color="Color.Secondary">
                        No more data!
                    </Button>
                }
            </div>
        </div>
    </Column>
    <Column ColumnSize="ColumnSize.Is2.OnDesktop">
        <HomeRightSidebar/>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <Footer/>
    </Column>
</Row>

@code {

    [CanBeNull]
    [Parameter]
    public string Filter { get; set; }

    [CanBeNull]
    [Parameter]
    public string Category { get; set; }

    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;

    private int CurrentPage { get; set; }

    private int TotalCount { get; set; }

    private bool _isLoading;

    [CanBeNull]
    private List<BlogPostDto> BlogPostListItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CurrentPage = 0;
        BlogPostListItems?.Clear();

        await ReadDataAsync();
    }

    private async Task ReadDataAsync()
    {
        var key = Category == null ? "" : System.Web.HttpUtility.UrlDecode(Category).ToLower();
        _isLoading = true;
        var result = await _blogPostAppService.GetListAsync(new GetBlogPostListDto() { Category = key, Filter = Filter, Sorting = nameof(BlogPostDto.CreationTime), MaxResultCount = PageSize, SkipCount = CurrentPage * PageSize });
        _isLoading = false;
        CurrentPage++;

        BlogPostListItems ??= new EditableList<BlogPostDto>();
        if (result.Items is {Count: > 0 })
        {
            BlogPostListItems.AddRange(result.Items);
        }
        TotalCount = (int)result.TotalCount;
    }

}