@implements IAsyncDisposable
@inject ISystemClientService SystemClientService
@inject BlogService BlogService

<div class="tags">
    <div class="side_title">
        <h3>Dotnet9网站</h3>
    </div>

    <table>
        <tr>
            <td>实时在线：@_onlineUserCount</td>
        </tr>
        <tr>
            <td>原创文章：@(_blogCountBrief?.DefaultCopyRightCount) / @(_blogCountBrief?.TotalCount) (@_defaultCopyRightBlogPostCountPercent)</td>
        </tr>
        <tr>
            <td>网站源码：<a href="@_siteInfo?.Github" target="_blank">Github</a>，<a href="@_siteInfo?.Github/issues" target="_blank">Bug反馈</a></td>
        </tr>
        <tr>
            <td>编译时间：</td>
        </tr>
        <tr>
            <td>@_publishTime</td>

        </tr>
    </table>
</div>

@code {

    SiteInfoDto? _siteInfo;

    static int _onlineUserCount;
    static Action? _onlineUserListChanged;

    BlogCountBrief? _blogCountBrief;
    string? _defaultCopyRightBlogPostCountPercent;
    string? _dotnetVersion;
    string? _appVersion;
    string? _publishTime;

    protected override async Task OnInitializedAsync()
    {
        _siteInfo = await SystemClientService.GetSiteInfoAsync();

        _onlineUserCount++;
        _onlineUserListChanged -= OnlineUserListChangedHandle;
        _onlineUserListChanged += OnlineUserListChangedHandle;
        _onlineUserListChanged.Invoke();

        _blogCountBrief = await BlogService.GetBlogCountBriefAsync();
        if (_blogCountBrief is {DefaultCopyRightCount: not null,TotalCount: not null })
        {
            _defaultCopyRightBlogPostCountPercent = (1.0 * _blogCountBrief.DefaultCopyRightCount.Value / _blogCountBrief.TotalCount.Value * 100).ToString("0.0") + "%";
        }

        _dotnetVersion = RuntimeInformation.FrameworkDescription;

        var assembly = Assembly.GetEntryAssembly();
        if (assembly != null)
        {
            _appVersion = assembly.GetName().Version?.ToString();
            var assemblyPath = assembly.Location;
            var lastModified = File.GetLastWriteTime(assemblyPath);
            _publishTime = lastModified.ToString("yyyy年MM月dd号 HH:mm:ss");
        }
    }

    void OnlineUserListChangedHandle()
    {
        InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        _onlineUserCount--;
        if (_onlineUserCount < 0)
        {
            _onlineUserCount = 0;
        }
        _onlineUserListChanged?.Invoke();
        _onlineUserListChanged -= OnlineUserListChangedHandle;
        return ValueTask.CompletedTask;
    }

}