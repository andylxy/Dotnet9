@page "/cat/{slug?}"
@using Dotnet9.Tools.Web.Shared.Public
@using Dotnet9.Tools.Web.Models
@layout DocLayout

<PageTitle>@T("Category") - @T("Dotnet9ToolsTitle")</PageTitle>

<h1 class="entry-title">@T("Category") @(string.IsNullOrWhiteSpace(_categoryName) ? "" : $":{_categoryName}")</h1>

@if (_items is not {Count: > 0 })
{
    <NotFound/>
}
else
{
    <CardItemList Items="_items"></CardItemList>
}

@code {

    [Parameter]
    public string? Slug { get; set; }

    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    List<CardItem>? _items;

    private string? _categoryName;

    public string T(string key)
    {
        return MainLayout?.T(key) ?? string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        _items?.Clear();
        if (string.IsNullOrWhiteSpace(Slug))
        {
            _items = ConstData.CategoryNotTreeItems!.Select(x => new CardItem(secondTitle: x.Name, secondUrl: $"/cat/{x.Slug}", author: T("SiteOwner"))).ToList();
            return;
        }
        var category = ConstData.CategoryNotTreeItems!.FirstOrDefault(x => x.Slug == Slug);
        if (category == null)
        {
            return;
        }

        _categoryName = category.Name;
        var posts = ConstData.BlogPostItems!.FindAll(x => x.Categories!.Contains(category.Name));
        if (posts.Count <= 0)
        {
            return;
        }
        _items = posts.Select(x =>
        {
            var innterCategory = ConstData.CategoryNotTreeItems.FirstOrDefault(c => c.Name == x.Categories![0]);
            return new CardItem(innterCategory?.Name, $"/cat/{innterCategory?.Slug}", x.Title, $"/post/{x.Slug}", x.Cover, author: x.CopyrightType == CopyrightType.Default ? T("SiteOwner") : x.Original, originalLink: x.CopyrightType == CopyrightType.Default ? "/" : x.OriginalLink, date: x.CreateDate);
        }).ToList();
        await Task.CompletedTask;
    }

}

<style>
    .entry-title { text-align: left; }
</style>