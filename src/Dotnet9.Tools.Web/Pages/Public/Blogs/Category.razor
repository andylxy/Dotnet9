@page "/cat/{slug?}"
@using Dotnet9.Tools.Web.Utils
@using Dotnet9.Tools.Web.Models
@using Dotnet9.Tools.Web.Shared.Public
@layout DocLayout

<PageTitle>分类 - D9工具箱</PageTitle>

<h1 class="entry-title">分类 @(string.IsNullOrWhiteSpace(_categoryName) ? "" : $":{_categoryName}")</h1>

@if (_items is not {Count: > 0 })
{
    <NotFound/>
}
else
{
    <CardItemList Items="_items"></CardItemList>
}

@code {

    [Parameter]
    public string? Slug { get; set; }

    List<CardItem>? _items;

    private string? _categoryName;

    protected override async Task OnParametersSetAsync()
    {
        _items?.Clear();
        if (string.IsNullOrWhiteSpace(Slug))
        {
            _items = ConstData.CategoryNotTreeItems!.Select(x => new CardItem(secondTitle: x.Name, secondUrl: x.Slug.GetCategoryUrl(), author: "沙漠尽头的狼")).ToList();
            return;
        }
        var category = ConstData.CategoryNotTreeItems!.FirstOrDefault(x => x.Slug == Slug);
        if (category == null)
        {
            return;
        }

        _categoryName = category.Name;
        var posts = ConstData.BlogPostItems!.FindAll(x => x.Categories!.Contains(category.Name));
        if (posts.Count <= 0)
        {
            return;
        }
        _items = posts.Select(x =>
        {
            var innterCategory = ConstData.CategoryNotTreeItems.FirstOrDefault(c => c.Name == x.Categories![0]);
            return CardItemExtension.CreateCardItem(innterCategory, x);
        }).ToList();
        await Task.CompletedTask;
    }

}

<style>
    .entry-title { text-align: left; }
</style>