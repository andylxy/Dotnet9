@page "/post/{slug?}"
@using Dotnet9.Tools.Web.Shared.Public
@using Dotnet9.Tools.Web.Models
@using System.Net
@layout DocLayout


@if (_post == null)
{
    <PageTitle>@T("Dotnet9ToolsTitle") - No post found</PageTitle>
    <h1 class="entry-title">No post found</h1>
}
else
{
    <PageTitle>@_post.Title - @T("Dotnet9ToolsTitle")</PageTitle>
    <h1 class="entry-title">@_post.Title</h1>

    <p class="entry-info">

        @if (string.IsNullOrWhiteSpace(_post.Original))
        {
            <span>@T("SiteOwner")&nbsp;&nbsp;</span>
        }
        else
        {
            <span>@T("PostFrom"): <a href="@_post.OriginalLink">@_post.Original&nbsp;&nbsp;</a></span>
        }

        <span class="dot">•</span>
        <span> @_post.CreateDate</span>

        @if (!string.IsNullOrWhiteSpace(_post.UpdateDate))
        {
            <span class="dot"> - </span>
            <span>@_post.UpdateDate</span>
        }

        @if (_post.Albums is {Length: > 0 })
        {
            <span class="dot">•</span>
            @for (var i = _post.Albums.Length - 1; i >= 0; i--)
            {
                var item = _post.Albums[i];
                var album = ConstDatas.AlbumTreeItems.FirstOrDefault(x => x.Name == item);
                <a href="@($"/album/{album?.Slug}")">@album?.Name &nbsp;&nbsp;</a>
                @if (i > 0)
                {
                    <span>,</span>
                }
            }
        }
        @if (_post.Categories is {Length: > 0 })
        {
            <span class="dot">•</span>
            @for (var i = _post.Categories.Length - 1; i >= 0; i--)
            {
                var item = _post.Categories[i];
                var cat = ConstDatas.CategoryNotTreeItems.FirstOrDefault(x => x.Name == item);
                <a href="@($"/cat/{cat?.Slug}")">@cat?.Name &nbsp;&nbsp;</a>
                @if (i > 0)
                {
                    <span>,</span>
                }
            }
        }
        @if (_post.Tags is {Length: > 0 })
        {
            <span class="dot">•</span>
            @foreach (var item in _post.Tags)
            {
                var tag = ConstDatas.BlogTagItems.FirstOrDefault(x => x == item);
                <a href="@($"/tag/{WebUtility.UrlEncode(tag)}")">@tag &nbsp;&nbsp;</a>
                <span>,</span>
            }
        }
    </p>
    <MRow>
        <MCol>
            <D9Markdown MarkdownContent="@_post.Content"></D9Markdown>
        </MCol>
    </MRow>
}

@code {

    [Parameter]
    public string? Slug { get; set; }

    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    private BlogPost? _post;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Slug))
        {
            _post = ConstDatas.BlogPostItems.FirstOrDefault(x => x.Slug == Slug);
        }
    }

    public string? T(string key)
    {
        return MainLayout?.T(key);
    }

}

<style>
    .entry-title { text-align: left; }

    .entry-info { font-size: 14px; }

    .entry-info a { text-decoration: none; }

    .dot {
        color: #ccc;
        margin-left: 3px;
        margin-right: 3px;
    }
</style>