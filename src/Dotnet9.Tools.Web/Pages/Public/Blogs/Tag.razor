@page "/tag/{name?}"
@using Dotnet9.Tools.Web.Shared.Public
@using Dotnet9.Tools.Web.Models
@using System.Net
@layout DocLayout

<h1 class="entry-title">@T("Tag")</h1>
@if (string.IsNullOrWhiteSpace(Name) || _items is not {Count: > 0 })
{
    <PageTitle>@T("Tag") - @T("Dotnet9ToolsTitle")</PageTitle>

    var random = new Random(DateTime.Now.Millisecond);
    @foreach (var tag in ConstData.BlogTagItems)
    {
        <MButton Class="ma-1" Outlined Color="@ConstData.RandomColor" Rounded Href="@($"/tag/{WebUtility.UrlEncode(tag)}")">
            @tag
        </MButton>
    }
}
else
{
    <CardItemList Title="@T("Tag")" Items="_items"></CardItemList>
}

@code {

    [Parameter]
    public string? Name { get; set; }

    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    List<CardItem>? _items;

    

    public string T(string key)
    {
        return MainLayout?.T(key) ?? string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            var factName = WebUtility.UrlDecode(Name);
            var posts = ConstData.BlogPostItems!.FindAll(x => x.Tags != null && x.Tags.Contains(factName));
            _items = posts.Select(x =>
            {
                var category = ConstData.CategoryNotTreeItems.FirstOrDefault(c => c.Name == x.Categories![0]);
                return new CardItem(category!.Name, $"/cat/{category.Slug}", x.Title, $"/post/{x.Slug}", x.Cover);
            }).ToList();
        }
        await base.OnParametersSetAsync();
    }

}