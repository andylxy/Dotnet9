@page "/tag/{name?}"
@using Dotnet9.Tools.Web.Shared.Public
@using Dotnet9.Tools.Web.Models
@using System.Net
@layout DocLayout

<h1 class="entry-title">@T("Tag") @(string.IsNullOrWhiteSpace(Name) ? "" : $":{Name}")</h1>

@if (string.IsNullOrWhiteSpace(Name))
{
    <PageTitle>@T("Tag") - @T("Dotnet9ToolsTitle")</PageTitle>

    var random = new Random(DateTime.Now.Millisecond);
    @foreach (var tag in ConstData.BlogTagItems)
    {
        <MButton Class="ma-1 text-capitalize" Outlined Color="@ConstData.RandomColor" Rounded Href="@($"/tag/{WebUtility.UrlEncode(tag)}")">
            @tag
        </MButton>
    }
}
else if (_items is {Count: > 0 })
{
    <CardItemList Items="_items"></CardItemList>
}
else
{
    <NotFound/>
}

@code {

    [Parameter]
    public string? Name { get; set; }

    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    List<CardItem>? _items;

    public string T(string key)
    {
        return MainLayout?.T(key) ?? string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        _items?.Clear();
        if (string.IsNullOrWhiteSpace(Name))
        {
            await Task.CompletedTask;
            return;
        }

        var factName = WebUtility.UrlDecode(Name);
        var posts = ConstData.BlogPostItems!.FindAll(x => x.Tags != null && x.Tags.Contains(factName));
        if (posts.Count <= 0)
        {
            return;
        }
        _items = posts.Select(x =>
        {
            var category = ConstData.CategoryNotTreeItems.FirstOrDefault(c => c.Name == x.Categories![0]);
            return new CardItem(category?.Name, $"/cat/{category?.Slug}", x.Title, $"/post/{x.Slug}", x.Cover, author: x.CopyrightType == CopyrightType.Default ? T("SiteOwner") : x.Original, originalLink: x.CopyrightType == CopyrightType.Default ? "/" : x.OriginalLink, date: x.CreateDate);
        }).ToList();
    }

}

<style>
    .entry-title { text-align: left; }
</style>