@page "/timestamp"
@using Dotnet9.Tools.Web.Shared.Public
@using Microsoft.AspNetCore.Components
@using BlazorComponent
@layout DocLayout

<PageTitle>@T("Dotnet9ToolsTitle") - @T("TimestampToolTitle")</PageTitle>

<h1 class="entry-title">@T("TimestampToolDesc")</h1>

<MRow>
    @T("TimestampToolDateNow") @DateToTimestamp(DateTime.Now, TimestampKind.Seconds)
</MRow>
<MRow>
    <MTextField Style="max-width: 200px;" Label="@T("TimestampToolTimestamp")" TValue="long" @bind-Value="@_timestamp1"/>
    <div style="display:flex;">
        <MRadioGroup TValue="TimestampKind" @bind-Value="_kindValue1" Row>
            <MRadio Value="TimestampKind.Seconds" Label="@T("TimestampToolKindSeconds")"></MRadio>
            <MRadio Value="TimestampKind.Milliseconds" Label="@T("TimestampToolKindMilliseconds")"></MRadio>
        </MRadioGroup>
    </div>
    <MButton Class="mx-3 white--text" Color="blue-grey" OnClick="@Convert1">@T("TimestampToolConvert")</MButton>
    <MTextField Label="@T("TimestampToolBeijingTime")" Style="max-width: 200px;" 
                TValue="string" @bind-Value="@_datetime1"
                Class="ml-3"/>
</MRow>
<MRow>
    <MTextField Label="@T("TimestampToolBeijingTime")" TValue="string" @bind-Value="@_datetime2" Style="max-width: 200px;" />
    <MButton Class="mx-3 white--text" Color="blue-grey" OnClick="@Convert2">@T("TimestampToolConvert")</MButton>
    <MTextField Label="@T("TimestampToolTimestamp")" TValue="long" @bind-Value="@_timestamp2" Style="max-width: 200px;" />
    <div style="display:flex;">
        <MRadioGroup TValue="TimestampKind" @bind-Value="_kindValue2" Row>
            <MRadio Value="TimestampKind.Seconds" Label="@T("TimestampToolKindSeconds")"></MRadio>
            <MRadio Value="TimestampKind.Milliseconds" Label="@T("TimestampToolKindMilliseconds")"></MRadio>
        </MRadioGroup>
    </div>
</MRow>

<ToolMarkdown
    LocalPostFilePath="wwwroot/doc/blog_contents/uploads/2022/02/2022-02-27_03.md"
    RemotePostUrl="https://dotnet9.com/1801"
    SourceCodeUrl="https://github.com/dotnet9/dotnet9.com/blob/develop/src/Dotnet9.Tools.Web/Pages/Public/TimeTools/TimestampTool.razor"/>

@code
{
    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    private DateTime _currentDatetime;
    private long _timestamp1;
    private long _timestamp2;
    private string? _datetime1;
    private string? _datetime2;
    private TimestampKind _kindValue1;
    private TimestampKind _kindValue2;

    protected override async Task OnInitializedAsync()
    {
        _currentDatetime = DateTime.Now;
        _timestamp1 = _timestamp2 = await DateToTimestamp(_currentDatetime, TimestampKind.Seconds);
        _datetime1 = _datetime2 = _currentDatetime.ToString("yyyy-MM-dd HH:mm:ss");
        await base.OnInitializedAsync();
    }

    private async Task Convert1()
    {
        _datetime1 = (await TimestampToDate(_timestamp1, _kindValue1)).ToString(_kindValue1 == TimestampKind.Seconds ? "yyyy-MM-dd HH:mm:ss" : "yyyy-MM-dd HH:mm:ss.fff");
    }

    private async Task Convert2()
    {
        try
        {
            _timestamp2 = await DateToTimestamp(DateTime.Parse(_datetime2), _kindValue2);
        }
        catch
        {
    // ignored
        }
    }

    private static async Task<long> DateToTimestamp(DateTime date, TimestampKind kind)
    {
        try
        {
            var point = new DateTime(1970, 1, 1);
            var time = date.Subtract(point);

            return (long) (kind == TimestampKind.Seconds ? time.TotalSeconds : time.TotalMilliseconds);
        }
        catch
        {
            await Task.CompletedTask;
            return default;
        }
    }


    private static async Task<DateTime> TimestampToDate(long timestamp, TimestampKind kind)
    {
        try
        {
            var point = new DateTime(1970, 1, 1);
            var time = kind == TimestampKind.Seconds ? point.AddSeconds(timestamp) : point.AddMilliseconds(timestamp);

            return time;
        }
        catch
        {
            await Task.CompletedTask;
            return default;
        }
    }

    public string T(string key)
    {
        return MainLayout?.T(key) ?? string.Empty;
    }

    enum TimestampKind
    {
        Seconds,
        Milliseconds
    }

    class TimestampItem
    {
        public string Label { get; }
        public TimestampKind Value { get; }

        public TimestampItem(string label, TimestampKind value)
        {
            Label = label;
            Value = value;
        }
    }
}