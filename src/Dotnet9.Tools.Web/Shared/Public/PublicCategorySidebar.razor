@using Dotnet9.Tools.Web.Models
@using Newtonsoft.Json
<MList Nav Linkage Class="mt-4" Expand>
    @foreach (var item in _items)
    {
        <CategoryMenu Item="@item"/>
    }
</MList>

@code
{
    private List<TreeItem> _items = new();

    [CascadingParameter]
    public PublicLayout? MainLayout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var toolJson = await File.ReadAllTextAsync(Path.Combine("wwwroot", "tool.json"));
        var toolListItem = JsonConvert.DeserializeObject<List<ToolItem>>(toolJson);

        var toolTreeItem = new TreeItem(TreeItemKind.Tool, T("Tools"), Guid.NewGuid().ToString(), icon: "mdi-tools")
        {
            Children = new List<TreeItem>()
        };
        toolListItem.ForEach(x => toolTreeItem.Children.Add(x.ToolToTreeItem()));

        var albumTreeItem = new TreeItem(TreeItemKind.Album, T("Album"), Guid.NewGuid().ToString(), icon: "mdi-clipboard-list ")
        {
            Children = new List<TreeItem>()
        };
        ConstDatas.AlbumTreeItems?.ForEach(x => albumTreeItem.Children.Add(x.AlbumToTreeItem()));

        var blogTreeItem = new TreeItem(TreeItemKind.Category, T("Blog"), Guid.NewGuid().ToString(), icon: "mdi-message-text-outline")
        {
            Children = new List<TreeItem>()
        };
        ConstDatas.CategoryNotTreeItems?.ForEach(x => blogTreeItem.Children.Add(x.CategoryToTreeItem()));

        _items.Clear();
        _items.Add(toolTreeItem);
        _items.Add(albumTreeItem);
        _items.Add(blogTreeItem);

        await base.OnInitializedAsync();
    }

    public string T(string key)
    {
        return MainLayout?.T(key) ?? string.Empty;
    }
}